buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
		gradlePluginPortal()
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://nexus.bertramlabs.com/content/repositories/snapshots" }
		maven { url "https://nexus.bertramlabs.com/content/repositories/releases" }
		maven { url "https://nexus.bertramlabs.com/content/repositories/publicReleases" }
	}
	dependencies {
		classpath 'com.github.johnrengelman:shadow:8.1.1'
		classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
		classpath "com.morpheusdata:morpheus-plugin-gradle:$morpheusPluginGradleVersion"
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
	}
}


apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'asset-pipeline'
apply plugin: 'maven-publish'
apply plugin: 'com.morpheusdata.morpheus-plugin-gradle'


group = 'com.morpheusdata'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

java {
	sourceCompatibility = JavaVersion.toVersion('1.11')
    targetCompatibility = JavaVersion.toVersion('1.11')
}

repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
	maven { url "https://nexus.bertramlabs.com/content/repositories/snapshots" }
	maven { url "https://nexus.bertramlabs.com/content/repositories/releases" }
	maven { url "https://nexus.bertramlabs.com/content/repositories/publicReleases" }
}

configurations {
	provided
}

dependencies {
	provided "com.morpheusdata:morpheus-plugin-api:$morpheusApiVersion"
	
	provided "org.codehaus.groovy:groovy-all:$groovyVersion"
	provided("com.bertramlabs.plugins:karman-core:${karmanVersion}") {
		exclude module: 'groovy-all'
	}
	implementation 'commons-beanutils:commons-beanutils:1.9.3'
	implementation "org.slf4j:slf4j-api:$slf4jVersion"
	implementation "org.slf4j:slf4j-parent:$slf4jVersion"
	implementation 'commons-net:commons-net:3.6'

	// Include morpheus-core and it's dependencies
	testImplementation 'io.reactivex.rxjava3:rxjava:3.1.7'
	testImplementation 'org.apache.httpcomponents:httpclient:4.5.3'
	testImplementation 'org.apache.httpcomponents:httpcore:4.4.5'
	testImplementation "org.slf4j:slf4j-parent:$slf4jVersion"

	testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
	testImplementation 'net.bytebuddy:byte-buddy:1.9.3'
	testImplementation 'org.objenesis:objenesis:2.6'
	testImplementation platform("org.spockframework:spock-bom:$spockVersion")
	testImplementation "org.spockframework:spock-core"
	testImplementation "org.spockframework:spock-junit4"  // you can remove this if your code does not rely on old JUnit 4 rules
	testImplementation 'cglib:cglib-nodep:3.2.12'
}


sourceSets {
	main {
		compileClasspath += configurations.provided
	}
}

//Set plugin metadata information here that gets written into the jar
jar {
	manifest {
		attributes(
				'Plugin-Class': 'com.morpheus.olvm.OlvmCloudPlugin',
				'Plugin-Version': version,
				'Morpheus-Name': 'OLVM Cloud Plugin',
				'Morpheus-Organization': 'morpheus',
				'Morpheus-Code': 'cloud.olvm',
				'Morpheus-Description': 'This is the official Morpheus plugin for interacting with Oracle\'s Linux Virtualization Manager. The plugin provides the ability to provision VMs, Docker Clusters, snapshots, etc within an OLVM environment.',
				'Morpheus-Logo': 'assets/OLVM-140.svg',
				'Morpheus-Logo-Dark': 'assets/OLVM-140.svg',
				'Morpheus-Labels': 'plugin cloud',
				'Morpheus-Repo': 'https://github.com/gomorpheus/morpheus-olvm-plugin',
				'Morpheus-Min-Appliance-Version': "7.0.2"
		)
	}
}

assets {
	packagePlugin = false //leave this false for plugins
}


task(console, dependsOn: 'classes', type: JavaExec) {
	main = 'groovy.ui.Console'
	classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath
}

test {
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
}
tasks.assemble.dependsOn tasks.shadowJar
